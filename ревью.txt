Программа создаёт список из 10 случайных четных чисел, меньше 100. Список сортируется по возрастанию.
Затем просит пользователя ввести своё число. 
Вызывает функцию s передавая ей на вход список rand_list и число введенное пользователем target.
Функция s проверяет является ли число target равным, одному из чисел из списка rand_list и возвращает позицию числа в списке, если оно там есть. Иначе возвращает none.
Затем выводит список пользователю. Проверяет значение переменной target_index. Если там есть какое-нибудь значение не равное none, то выводит его и число введенное пользователем. Иначе выводит пользователю сообщение, что не может найти введенное им число в списке.
В программе также есть проверка введенного пользователем значения на корректность. Если введенное значение не является целым числом, то срабатывает исключение и выводится сообщение что значение не подходит. 
Функция s получает на вход список и целое число, введенное пользователем. Затем она инициализирует две переменные, являющиеся границами списка(одна из них равна 0, что соответствует левой границе списка, а вторая длине списка из которой отнята 1, что соответствует правой границе). 
В цикле, который исполняется пока левая граница меньше или равна правой, список делится на две равные части и проверяется условие. Если число в центре полученного списка меньше числа введенного пользователем, то левая граница смещается на позицию центра плюс 1. Если больше, то правая граница смещается к центру минус 1. 
Если оба условия не выполняются, то функция возвращает позицию центра получивщегося списка. Если число не обнаружено, то функция возвращает none. 

Added error protection in GET parameters

Replaced the addition of strings with a template using the format method

Simplified the code

Created a README file

Created a beta version of the program that displays the weather forecast for three cities on the console: London, Sheremetyevo, Cherepovets.




Лондон

     \  /       Переменная облачность
   _ /"".-.     +10(8) °C      
     \_(   ).   ↗ 15 km/h      
     /(___(__)  10 km          
                0.0 mm         
                        ┌─────────────┐                        
┌───────────────────────┤ Сб. 06 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│    \  /       Переменная обл…│               Пасмурно       │
│  _ /"".-.     +12(10) °C     │      .--.     +12(10) °C     │
│    \_(   ).   ↗ 19-25 km/h   │   .-(    ).   ↗ 22-31 km/h   │
│    /(___(__)  10 km          │  (___.__)__)  10 km          │
│               0.0 mm | 0%    │               0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┘
                        ┌─────────────┐                        
┌───────────────────────┤ Вс. 07 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│    \  /       Переменная обл…│     \   /     Ясно           │
│  _ /"".-.     +12(10) °C     │      .-.      +9(6) °C       │
│    \_(   ).   → 22-26 km/h   │   ― (   ) ―   → 16-23 km/h   │
│    /(___(__)  10 km          │      `-’      10 km          │
│               0.0 mm | 0%    │     /   \     0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┘
                        ┌─────────────┐                        
┌───────────────────────┤ Пн. 08 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│    \  /       Переменная обл…│               Облачно        │
│  _ /"".-.     +11(10) °C     │      .--.     +10(9) °C      │
│    \_(   ).   → 9-10 km/h    │   .-(    ).   ↑ 7-11 km/h    │
│    /(___(__)  10 km          │  (___.__)__)  10 km          │
│               0.0 mm | 0%    │               0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┘

Все новые фичи публикуются здесь: @igor_chubin

Шереметьево

       .-.      Небольшой дождь
      (   ).    +11(8) °C      
     (___(__)   → 20 km/h      
      ‘ ‘ ‘ ‘   9 km           
     ‘ ‘ ‘ ‘    0.8 mm         
                        ┌─────────────┐                        
┌───────────────────────┤ Сб. 06 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│      .-.      Небольшой дожд…│     \   /     Ясно           │
│     (   ).    +9(7) °C       │      .-.      +6(3) °C       │
│    (___(__)   ↗ 16-21 km/h   │   ― (   ) ―   ↗ 19-29 km/h   │
│     ‘ ‘ ‘ ‘   9 km           │      `-’      10 km          │
│    ‘ ‘ ‘ ‘    2.3 mm | 95%   │     /   \     0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┘
                        ┌─────────────┐                        
┌───────────────────────┤ Вс. 07 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│               Облачно        │     \   /     Ясно           │
│      .--.     +8(5) °C       │      .-.      +5(2) °C       │
│   .-(    ).   → 19-23 km/h   │   ― (   ) ―   ↗ 17-30 km/h   │
│  (___.__)__)  10 km          │      `-’      10 km          │
│               0.0 mm | 0%    │     /   \     0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┘
                        ┌─────────────┐                        
┌───────────────────────┤ Пн. 08 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│      .-.      Слабая морось  │               Пасмурно       │
│     (   ).    +7(3) °C       │      .--.     +8(5) °C       │
│    (___(__)   ↑ 22-29 km/h   │   .-(    ).   ↗ 14-21 km/h   │
│     ‘ ‘ ‘ ‘   2 km           │  (___.__)__)  10 km          │
│    ‘ ‘ ‘ ‘    0.3 mm | 53%   │               0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┘

Все новые фичи публикуются здесь: @igor_chubin

Череповец

     \  /       Переменная облачность
   _ /"".-.     +7(4) °C       
     \_(   ).   ↗ 19 km/h      
     /(___(__)  10 km          
                0.0 mm         
                        ┌─────────────┐                        
┌───────────────────────┤ Сб. 06 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│  _`/"".-.     Небольшой ливн…│  _`/"".-.     Местами дождь  │
│   ,\_(   ).   +7(4) °C       │   ,\_(   ).   +4(0) °C       │
│    /(___(__)  ↗ 21-29 km/h   │    /(___(__)  ↗ 21-31 km/h   │
│      ‘ ‘ ‘ ‘  10 km          │      ‘ ‘ ‘ ‘  10 km          │
│     ‘ ‘ ‘ ‘   0.2 mm | 77%   │     ‘ ‘ ‘ ‘   0.1 mm | 51%   │
└──────────────────────────────┴──────────────────────────────┘
                        ┌─────────────┐                        
┌───────────────────────┤ Вс. 07 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│      .-.      Умеренный снег │               Пасмурно       │
│     (   ).    +3(-1) °C      │      .--.     +3(-1) °C      │
│    (___(__)   → 18-26 km/h   │   .-(    ).   ↑ 14-21 km/h   │
│    * * * *    5 km           │  (___.__)__)  10 km          │
│   * * * *     0.1 mm | 76%   │               0.0 mm | 0%    │
└──────────────────────────────┴──────────────────────────────┘
                        ┌─────────────┐                        
┌───────────────────────┤ Пн. 08 нояб.├───────────────────────┐
│             День      └──────┬──────┘       Ночь            │
├──────────────────────────────┼──────────────────────────────┤
│      .-.      Небольшой дожд…│      .-.      Умеренный снег │
│     (   ).    +4(3) °C       │     (   ).    +1(-2) °C      │
│    (___(__)   ↑ 8-12 km/h    │    (___(__)   ↓ 13-17 km/h   │
│     ‘ ‘ ‘ ‘   9 km           │    * * * *    5 km           │
│    ‘ ‘ ‘ ‘    1.5 mm | 78%   │   * * * *     0.2 mm | 71%   │
└──────────────────────────────┴──────────────────────────────┘

Все новые фичи публикуются здесь: @igor_chubin



Документация к методам API Bitly на русском
Добро пожаловать в русскую документацию API Bitly! Если вы хотите использовать Bitly для сокращения, маркировки и распространения ссылок, то вы в нужном месте. Эта статья написана не в целях перевода документации на русский, а для упрощения понимания документации Bitly разработчиками, т.к. страницы документации очень перегружены информацией и даже опытным веб-разработчикам тяжело в ней ориентироваться.

Документация является не полной, переведены только те методы API, которые авторам показались самыми необходимыми. Если вы хотите поучаствовать в переводе — мы всегда будем рады любой помощи.

Документация создана в рамках разработки курсов dvmn.org.

Оглавление
Введение
Оглавление
Авторизация
OAuth 2
Пользователи
Получить свой профиль
Битлинки
Развернуть битлинк
Создать битлинк
Получить информацию по битлинкам по группе
Получить сумму кликов по битлинку
Получить клики по битлинку по датам
Обновить битлинк
Получить информацию о битлинке
Сократить ссылку
Организации
Группы
Кастомные битлинки
Кампании
Фирменные коротиие домены
Лучшие практики
Авторизация
Перед взаимодействием в API Bitly нужно получить токен. К счастью, для этого не нужно писать код, достаточно следовать инструкциям из документации.

Токен выглядит как строка наподобие следующей: 17c09e20ad155405123ac1977542fecf00231da7. Bitly предлагает несколько видов токенов, но для методов, указанных в этой документации, хватит GENERIC ACCESS TOKEN. Ссылка для генерации токена указана на странице документации Bitly.

OAuth 2
Документация Bitly гласит, что для авторизации с помощью OAuth 2 нужно только добавить к запросу HTTP-заголовок Authorization: Bearer ВашТокен.

Почитать что это такое.

Пользователи
Получить свой профиль
Возвращает информацию о вашем профиле

Адрес: /user

Полный адрес: https://api-ssl.bitly.com/v4/user

Метод: GET

Формат данных: JSON. Убедитесь, что передаёте не строку.

Пример запроса

GET /v4/user HTTP/1.1
Host: api-ssl.bitly.com
Пример успешного ответа

{
  "created_at": "1970-01-01T00:00:00+0000",
  "modified": "1970-01-01T00:00:00+0000",
  "login": "alina01",
  "emails": [{"email": "example@gmail.com",
  ...
}
Битлинки
«Битлинки» — это то, как мы называем сокращённые ссылки. Они с доменом bit.ly и выглядят, например, так: bit.ly/ABCDE.

Развернуть битлинк
Возвращает исходную ссылку из укороченной, и сообщит когда она была укорочена.

Адрес: /expand

Полный адрес: https://api-ssl.bitly.com/v4/expand

Метод: POST

Формат данных: JSON. Убедитесь, что передаёте не строку.

Тело запроса:

bitlink_id — битлинк, например: bit.ly/ABCDE.

Пример запроса

POST /v4/expand HTTP/1.1
Host: api-ssl.bitly.com
...
Body:
{ "bitlink_id": "bit.ly/2OaMRRO"}
Пример успешного ответа

{
  "created_at":"2018-10-29T07:33:49+0000",
  "link":"http://bit.ly/2OaMRRO",
  "id":"bit.ly/2OaMRRO",
  "long_url":"http://dvmn.org/modules/"
}
Создать битлинк
Создание укороченной ссылки, т.е. «битлинк». Является расширенной версией метода Сократить ссылку.

Адрес: /bitlinks

Полный адрес: https://api-ssl.bitly.com/v4/bitlinks

Метод: POST

Формат данных: JSON. Убедитесь, что передаёте не строку.

Тело запроса:

long_url (обязательный)- длинная ссылка, которую вы хотите сократить.

group_guid — id группы, к которой битлинк будет принадлежать.

domain — на каком домене будет битлинк. По умолчанию это bit.ly, но можно его поменять на свой, корпоративный, например.

title — название битлинка.

Пример запроса

POST /v4/bitlinks HTTP/1.1
Host: api-ssl.bitly.com
...
Body:
{ "long_url": "http://dvmn.org"}
Пример успешного ответа

{
  "created_at": "1970-01-01T00:00:00+0000",
  "id": "bit.ly/2Diay99",
  "link": "http://bit.ly/2Diay99",
  "custom_bitlinks": [],
  "long_url": "http://dvmn.org/",
  "archived": false,
  "tags": [],
  "deeplinks": [],
  "references": {
    "group": "https://api-ssl.bitly.com/v4/groups/Biatc0ZvtUI"
  }
}
Получить сумму кликов по битлинку
Возвращает сумму кликов по определённому битлинку. Метод сворачивает все данные о кликах в одно поле, total_clicks.

Адрес: /bitlinks/{bitlink}/clicks/summary

Полный адрес: https://api-ssl.bitly.com/v4/bitlinks/{bitlink}/clicks/summary

Метод: GET

Параметры пути:

bitlink — Битлинк вида bit.ly/ABCDE.

Параметры запроса:

unit — Единица измерения времени. По умолчанию day, но есть ещё minute, hour, week, month.

units — Число "единиц измерения", для которых считать метрики. По умолчанию -1. Когда units равен -1, возвращаются клики за всё время.

size — Число результатов, которое необходимо вернуть.

unit_reference — таймстемп стандарта ISO-8601, указывающий последнюю точку времени, по которой выводить метрики. По умолчанию устанавливается текущее время (т.е. метрики вернутся за всё время, без ограничений).

Пример запроса

GET /v4/bitlinks/bit.ly/2Diay99/clicks/summary?unit=day&units=-1 HTTP/1.1
Host: api-ssl.bitly.com
Пример успешного ответа

{
  "unit_reference": "2018-11-12T12:09:11+0000",
  "total_clicks": 14,
  "units": -1,
  "unit": "day"
}
Получить клики по битлинку по датам
Возвращает клики по определённому битлинку с указанием отрезков времени, в которые они были сделаны.

Адрес: /bitlinks/{bitlink}/clicks

Полный адрес: https://api-ssl.bitly.com/v4/bitlinks/{bitlink}/clicks

Метод: GET

Параметры пути:

bitlink — Битлинк вида bit.ly/ABCDE.

Параметры запроса:

unit — Единица измерения времени. По умолчанию day, но есть ещё minute, hour, week, month.

units (обязательный) — Число "единиц измерения", для которых считать метрики. По умолчанию -1.

size — Число результатов, которое необходимо вернуть.

unit_reference — таймстемп стандарта ISO-8601, указывающий последнюю точку времени, по которой выводить метрики. По умолчанию устанавливается текущее время (т.е. метрики вернутся за всё время, без ограничений).

Пример запроса

GET /v4/bitlinks/bit.ly/2Diay99/clicks?unit=day&units=-1 HTTP/1.1
Host: api-ssl.bitly.com
Пример успешного ответа

{
  "unit_reference": "2018-11-12T12:16:07+0000",
  "link_clicks": [
    {
      "date": "2018-11-12T00:00:00+0000",
      "clicks": 1
    }
  ],
  "units": -1,
  "unit": "day"
}
Получить информацию о битлинке
Возвращает информацию о битлинке. Заархивирован-ли, кем создан, когда и т.д.

Адрес: /bitlinks/{bitlink}

Полный адрес: https://api-ssl.bitly.com/v4/bitlinks/{bitlink}

Метод: GET

Пример запроса

GET /v4/bitlinks/bit.ly/2Diay99/ HTTP/1.1
Host: api-ssl.bitly.com
Пример успешного ответа

{
  "created_at": "2018-11-12T12:00:46+0000",
  "id": "bit.ly/2Diay99",
  "link": "http://bit.ly/2Diay99",
  "custom_bitlinks": [],
  "long_url": "http://dvmn.org/",
  "title": "Devman - курс веб-разработки на Python",
  "archived": false,
  "created_by": "o_4eeh3glen0",
  "client_id": "a5e8cebb233c5d07e5c553e917dffb92fec5264d",
  "tags": [],
  "deeplinks": [],
  "references": {
    "group": "https://api-ssl.bitly.com/v4/groups/Biatc0ZvtUI"
  }
}
Сократить ссылку
Сократить ссылку и получить битлинк. Является упрощённой версией метода Создать битлинк.

Адрес: /shorten

Полный адрес: https://api-ssl.bitly.com/v4/shorten

Метод: POST

Формат данных: JSON. Убедитесь, что передаёте не строку.

Тело запроса:

long_url (обязательный)- длинная ссылка, которую вы хотите сократить.

group_guid — id группы, к которой битлинк будет принадлежать.

domain — на каком домене будет битлинк. По умолчанию это bit.ly, но можно его поменять на свой, корпоративный, например.

Пример запроса

POST /v4/shorten HTTP/1.1
Host: api-ssl.bitly.com
...
Body:
{ "long_url": "http://dvmn.org"}
Пример успешного ответа

{
  "created_at": "1970-01-01T00:00:00+0000",
  "id": "bit.ly/2DeW5e2",
  "link": "http://bit.ly/2DeW5e2",
  "custom_bitlinks": [],
  "long_url": "http://dvmn.org/modules/",
  "archived": false,
  "tags": [],
  "deeplinks": [],
  "references": {
    "group": "https://api-ssl.bitly.com/v4/groups/Biatc0ZvtUI"
  }
}





Requests
requests — это библиотека, с помощью которой можно делать запросы в интернет. Само слово “requests” переводится как запросы. Вот как сделать запрос на сайт google.com:

import requests


url = 'https://google.com'
response = requests.get(url)
response.raise_for_status()
Функция requests.get() делает запрос к сайту google.com, а в переменной response теперь ответ от сайта. Ответ — это не строка и не число. Это сложный объект, в котором есть много всего. Подробнее об этом можно посмотреть в слайдах.

Строчка response.raise_for_status() нужна для того, чтобы проверить, понял вас сервер или нет. Если сервер вернёт 404 «Ресурс не найден», то в response не будет странички сайта google.com, а будет только “Ошибка 404”. Если не вызвать raise_for_status, программа подумает, что всё в порядке, что вы так и хотели: отправить запрос на страницу, которой нет. Обязательно вызывайте .raise_for_status() после каждого запроса в интернет, иначе вы рискуете потратить кучу времени на поиск ошибки, которую замалчивает библиотека requests.

Всегда вызывайте .raise_for_status()

Вот как получить текст ответа от сервера:

print(response.text)
В ответ вы получите огромный HTML-документ одной строкой. Начинаться будет так:

<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="ru"><head>...
Именно это получает ваш браузер, когда вы заходите на сайт google.com, и из этого он уже отрисовывает красивую страничку.

Но стоит понимать, что requests может скачивать не только HTML-документы, а буквально всё, что есть в интернете.

Вот как скачать картинку:

import requests


url = "https://dvmn.org/filer/canonical/1542890876/16/"

response = requests.get(url)
response.raise_for_status() 

filename = 'dvmn.svg'
with open(filename, 'wb') as file:
    file.write(response.content)
То же самое: делаем запрос по ссылке, получаем ответ, потом сохраняем его в файл. Единственное отличие в том, что вместо response.text для картинок используется response.content, потому что картинка — это не текст.

.text — для текста, .content — для картинки






Переменные-флаги
В старые времена с помощью флагов командовали войсками. Например, если флаг поднят — нужно атаковать, опущен — отступать.

В программировании “флагом” называют переменную булевого типа, т.е. в которой хранится либо True, либо False. Их так называют потому, что управление с их помощью похоже на флаги: есть всего 2 варианта, флаг или поднят, или опущен.

Например, вам интересно, есть ли человек на видео. Вы пишете функцию, которая проходит по кадрам видео и проверяет каждый из них. Если найдёт человека, то сообщит об этом:

def check_human_in_video(video):
    human_found = False
    for frame in video:
        if frame.has_human():
            human_found = True
    print(human_found)
Обратите внимание, что True и False написаны без кавычек! Так и задумано - это не строки, а отдельный тип данных.

По умолчанию считаем, что человека нет, поэтому создаём флаг human_found = False. Далее для каждого кадра в видео проверяем, есть ли на нём человек — вызываем метод объекта frame.has_human(). Если человек найден, то меняем флаг на True. В конце выводим флаг с помощью print.

Если ни на одном кадре человек не найдётся, то флаг так и останется False, потому что условие if frame.has_human() ни разу не сработает.

Если хоть на одном кадре есть человек, то при обработке этого кадра сработает условие if frame.has_human() и флаг станет True.

Как улучшить код
Теперь усовершенствуем код. Функция станет удобнее, если откажется от вывода на экран в пользу return.

def is_human_in_video(video):
    human_found = False
    for frame in video:
        if frame.has_human():
            human_found = True
    return human_found

print(is_human_in_video(video))
Следующим шагом ускорим работу функции. Сейчас код продолжит проверку, даже если встретит человека на самом первом кадре видео. Если кадров в video будет много, то проверка займёт время. Это даёт возможность для оптимизации. Прервём проверку сразу, как только станет ясен результат:

def is_human_in_video(video):
    human_found = False
    for frame in video:
        if frame.has_human():
            human_found = True
            return human_found
    return human_found

print(is_human_in_video(video))
Теперь заметно, что от переменной human_found можно избавиться, сделав код немного лаконичнее:

def is_human_in_video(video):
    for frame in video:
        if frame.has_human():
            return True
    return False

print(is_human_in_video(video))
Но и это ещё не всё. Флаги являются таким частым приёмом, что они попали в стандартную библиотеку Python. Код выше можно записать в одну строку:

def is_human_in_video(video):
    return any(frame.has_human() for frame in video)







argparse.ArgumentParser

Так можно подключить argparse и оставить подсказку о том, что делает программа

import argparse


parser = argparse.ArgumentParser(description='Описание что делает программа')
parser.parse_args()




import argparse


parser = argparse.ArgumentParser(
    description='Описание что делает программа'
)
parser.add_argument('name', help='Ваше имя')
args = parser.parse_args()
print(args.name)



import argparse


parser = argparse.ArgumentParser(
    description='Описание что делает программа'
)
parser.add_argument('name', help='Ваше имя')
parser.add_argument('-l', '--last_name', help='Ваша фамилия')
args = parser.parse_args()
print(args.name)
print(args.last_name)


import argparse


parser = argparse.ArgumentParser(
    description='Описание что делает программа'
)
parser.add_argument('age', help='Возраст', type=int)
args = parser.parse_args()
print(args.age)
print(type(args.age))

import argparse


parser = argparse.ArgumentParser(
    description='Описание что делает программа'
)
parser.add_argument('--my_flag', action='store_true',
                    help='Булевое значение True или False')
args = parser.parse_args()
print(args.my_flag)




В проектах часто используются данные, которые разработчикам не хотелось бы показывать всему миру. А иногда даже собственным коллегам по репозиторию. Такие данные называют чувствительными. Самыми распространёнными видами таких данных являются логины, пароли, API токены.

Для сокрытия таких данных разработчики используют переменные окружения, но они сбрасываются каждый раз, когда вы закрываете терминал. Чтобы они не сбрасывались, их можно сделать постоянными, но что, если у вас два проекта, в каждом из которых вам нужна переменная TOKEN?

В сокрытии таких данных вам поможет python-dotenv. Достаточно установить его с помощью pip3 и дописать в начало файла:

from dotenv import load_dotenv
load_dotenv()
Далее нужно создать файл .env и прописать все чувствительные данные в него, вот так:

LOGIN=dvmn-tasks
TOKEN=afnroeroinorf13jr94bg3fn




Как перехватить ошибку
Если возникшее исключение — часть плана или вы хотите обработать его особенном образом, то на такой случай в Python существует конструкция try-except:

filepath = user.get_avatar_filepath()
try:
    avatar = Image.open(filepath)
except FileNotFoundError:
    avatar = default_avatar
Внутри блока try(внутри — это с отступами) пишется код, который потенциально может вызвать ошибку. Если исключения не произойдёт, то Python проигнорирует блок except и пойдёт дальше. Если же возникла ошибка — сработает код внутри блока except.

Обратите внимание, что после except стоит тип исключения, который может случиться внутри try. Это правило хорошего тона. Мы явно указываем тип ошибки, которую ожидаем.

Код, в котором не указан тип ошибки выглядит так:

filepath = user.get_avatar_filepath()
try:
    avatar = use_avatar(filepath)
except:
    avatar = default_avatar
Однажды может случится страшное: другая ошибка. Но код будет себя вести так, будто ничего страшного не произошло, будто он просто не нашёл файл. Python не покажет трейсбек и чинить код придется методом ненаучного тыка.

Когда разработчик не указывает тип исключения, кажется, будто он просто написал такой плохой код, что сам себе не доверяет. Без особой необходимости так делать нельзя.



try:
    ...
    # отладочный raise
    raise SpecialError
    ...
except SpecialError:
    # code for special case
    ...



Если ошибка происходит где-то внутри функции, поставьте в самом её начале print со всеми её аргументами.
 
Проверьте, что аргументы не перепутаны местами и что в них лежит то, что вы хотели передать.


Где обработать исключение
Исключения в Python — это особый объект, который умеет путешествовать между функциями и менять их поведение. Своим появлением исключение прерывает обычное исполнение программы — сверху вниз и вглубь — и переводит его в особый обратный режим — наверх до подходящего try except finally.

Для примера рассмотрим программу — информер с прогнозом погоды. Функция request_weather делает запрос к API сайта weather.com и возвращает прогноз погоды:

def request_weather():
    response = requests.get('https://weather.com/api/weather/moscow/')
    return response.json()
Если с сервером weather.com не удаётся связаться, то вызов метода requests.get приводит к исключению ConnectionError — к ошибке соединения:

def request_weather():
    response = requests.get('https://weather.com/api/weather/moscow/')
    return response.json()

request_weather()
# requests.exceptions.ConnectionError:
# ...
# Failed to establish a new connection: [Errno -2] Name or service not known',))
По логике программы при сбое на одном сайте мы тянем информацию с запасного сайта openweathermap.org:

def request_weather():
    response = requests.get('https://weather.com/api/weather/moscow/')
    return response.json()

def request_openweathermap():
    response = requests.get('https://openweathermap.org/api/moscow/')
    return response.json()

request_weather()
# TODO в случае сбоя вызывать `request_openweathermap`
Здесь начинаются сложности. Нельзя перехватывать исключение ConnectionError внутри функции request_weather, иначе внеший код не узнает о проблеме и не сможет переключиться на вызов второй функции request_openweathermap. Перехватывать исключение нужно снаружи:

def request_weather():
    response = requests.get('https://weather.com/api/weather/moscow/')
    return response.json()

def request_openweathermap():
    response = requests.get('https://openweathermap.org/api/moscow/')
    return response.json()

try:
    forecast = request_weather()
except requests.exceptions.ConnectionError:
    forecast = request_openweathermap()
Исключение возвникло внутри метода requests.get и всплыло вверх — внутрь функции def request_weather. Там не нашлось подходящего обработчика исключений, потому что не было конструкций try except и поэтому исключение продолжило всплывать выше — наружу функции request_weather. Подходящий обработчик нашелся в последних строках кода:

try:
    forecast = request_weather()
except requests.exceptions.ConnectionError:
    forecast = request_openweathermap()
Исключение всегда всплывает вверх по цепочке вызовов функций, пока его не перехватят. Если ни одна функция так и не обработает исключение, то вмешается сам интерпретатор Python: он перехватывает все что до него долетает и выводит на экран:

def request_weather():
    response = requests.get('https://weather.com/api/weather/moscow/')
    response.raise_for_status()  # здесь возникло исключение
    return response.json()

def request_openweathermap():
    response = requests.get('https://openweathermap.org/api/moscow/')
    response.raise_for_status()
    return response.json()

def main():
    try:
        forecast = request_weather()
    except requests.exceptions.ConnectionError:
        forecast = request_openweathermap()

main()  # здесь исключение будет перехвачено Питоном
# requests.exceptions.HTTPError: 404 Client Error: Not Found for url ...
# ...
В примере выше исключение HTTPError возникло внутри метода response.raise_for_status(), затем всплыло в функцию def request_weather(): и там его никто не обработал. Тогда исключение всплыло еще выше в функцию def main():, но и там обработчика не нашлось. Исключение всплыло еще выше и оказалось на уровне интерпретатора Python — он перехватил исключение и вывел его на экран.

Где ловить исключения
Основная идея: исключение ловят не там, где оно возникло, а там где его удобно обработать. Исключение само будет всплывать от функции к функции пока не встретит подходящий обработчик, делать для этого ничего не надо, достаточно не мешать.

Алгоритм действий следующий. Сначала выкидываем исключение, чтобы сообщить об ошибке и прервать нормальное исполнение программы. Затем ищем место в коде где это исключение удобнее всего обработать и сразу придумываем логику обработки такого исключения. Если места не нашлось или обработка сводится к print(error), то отказываемся от перехвата исключения — интерпретатор Python в любом случае перехватывает все исключения и выводит их на экран.

На вкладке Network в колонке Iniciator показано где какой файл подключался:

Обратите внимание, что в таблице встречаются странные записи со статусом 302 Found и пустым превью. Это редиректы. Если нажать на “инициатора” у картинки, можно заметить, что они как раз и были скачаны по “редиректу”:





```ini
# Configuration is dased on official Gunicorn docs: https://docs.gunicorn.org/en/latest/deploy.html?highlight=systemd#systemd
[Unit]
Description=Flask micro-service to serve MyIP project
After=network.target

[Service]
User=root
Group=root
WorkingDirectory=/opt/myip-multi-framework/flask_project/
ExecStart=/opt/myip-multi-framework/venv/bin/gunicorn -b 206.189.61.169:8080 --workers 3 app:app  # ! Замените адрес на свой
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true
Restart=on-failure
RestartSec=2

[Install]
WantedBy=multi-user.target
```




```ini
# Configuration is dased on official Gunicorn docs: https://docs.gunicorn.org/en/latest/deploy.html?highlight=systemd#systemd
[Unit]
Description=Django micro-service to serve MyIP project
After=network.target

[Service]
User=root
Group=root
WorkingDirectory=/opt/myip-multi-framework/django_project/
Environment="DJ_DEBUG=False"
Environment="DJ_ALLOWED_HOSTS=206.189.61.169"  # ! Замените адрес на свой
ExecStart=/opt/myip-multi-framework/venv/bin/gunicorn -b 206.189.61.169:8081 --workers 3 django_project.wsgi:application  # ! Замените адрес на свой
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true
Restart=on-failure
RestartSec=2

[Install]
WantedBy=multi-user.target
```





Общее описание объема работы:
1. В приложении есть функционал поиска работы (поиска заявок, которые можно взять на себя и выполнить работу). На данный момент этот фунционал в свободном доступе для всех пользователей. Что нужно: новый пользователь после установки приложения должен иметь возможность 1 неделю пользоваться функционалом бесплатно, после чего ему необходимо оплатить подписку, подписок будет 3 вида: на 1 месяц, на 6 месяцев, на 12 месяцев.
2. В приложении есть функционал стикеров. Это способ размещения объявлений, которые использует пользователь, что ищет исполнителя для своей работы. Планируется сделать размещение стикеров платным. Человек сможет разместить стикер на 1, 7, 30 дней. Для того чтобы оплатить размещение стикера, необходимо пополнить баланс в профиле пользователя. Баланс пополняется в условных монетах. Одна условная монета равна одному рублю.

Собственно какие задачи стоят:
1. Внедрение Apple/Google подписок:
- Подписка Apple/Google: оформление, подтверждение, возврат, восстановление;
- Разграничение доступов к функциям пользователям с/без подписки.

2. Внедрение Apple/Google покупок:
- Баланс пользователя: текущий баланс, таблица списаний/пополнений;
- Покупки в Apple/Google: покупка, подтверждение, возврат, восстановление;
- Покупка и размещение стикера;
- Расписание снятия стикеров с публикации;
- Акционные покупки/размещения.

Ну и плюс развернуть проект на новом сервере, организовать DEV/STAGE контуры.

Это проект, который мы взяли на доработку, т.е. писали изначально другие ребята.
Сервер на PHP 7.1, October CMS 1.0.432.




https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04
https://www.postgresqltutorial.com/postgresql-select/
https://www.sql-ex.ru/

https://youtu.be/hio5jDRKUVc
https://youtu.be/HFt7Lm7hv1E
https://learngitbranching.js.org/
https://realpython.com/python-async-features/
https://realpython.com/async-io-python/
https://youtu.be/G2EG-eCHOiI?list=PLKdc04x0eX56_8aFmz2gYiX52A59kIj3l&t=860
https://youtu.be/G2EG-eCHOiI?list=PLKdc04x0eX56_8aFmz2gYiX52A59kIj3l&t=860
https://docs.python.org/3/library/asyncio.html
