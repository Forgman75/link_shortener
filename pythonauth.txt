url = 'https://passport.yandex.ru/auth'
payload = {
  "login": "some-login",
  "password": "sample-text"
}

response = requests.post(url, json=payload)
response.raise_for_status()

print(response.json())


url = 'https://wikipedia.com'
headers = {
    'User-Agent': 'curl',
    'Accept-Language': 'ru-RU'
}

response = requests.get(url, headers=headers)
response.raise_for_status()





url = 'https://wikipedia.com'
headers = {
    "Authorization": "Bearer cn389ncoiwuencr"
}

response = requests.get(url, headers=headers)
response.raise_for_status()



import requests


filename = 'dvmn.svg'
url = "https://dvmn.org/filer/canonical/1542890876/16/"

response = requests.get(url)
response.raise_for_status()

with open(filename, 'wb') as file:
    file.write(response.content)



import requests

with open('image.jpg', 'rb') as file:
    url = '...'
    files = {
      'media': file,
    }
    response = requests.post(url, files=files)
    response.raise_for_status()



import requests

...


page = 0
pages_number = 1

while page < pages_number:
    page_response = requests.get(url, params={'page': page})
    page_response.raise_for_status()

    pages_number = page_response.json()['pages_number']
    page += 1

    # TODO добавить данные из page_data в итоговый список
    ...
    


import requests
from itertools import count

...


for page in count(0):
    page_response = requests.get(url, params={'page': page})
    page_response.raise_for_status()

    page_data = page_response.json()
    if page >= page_data['pages_number']:
        break

    # TODO добавить данные из page_data в итоговый список
    ...
    


import requests
from itertools import count

...


def fetch_records():
    for page in count():
        page_response = requests.get(url, params={'page': page})
        page_response.raise_for_status()
        page_data = page_response.json()

        if page >= page_data['pages_number']:
            break

        yield from page_data['page_records']
    


import requests

def fetch_specific_data():
    ...
    response = requests.get(url, params=params)

    # сообщаем внешнему коду о возможной ошибке
    response.raise_for_status()

    return response.json()['specific_key']


try:
    data = fetch_specific_data()
except requests.exceptions.HTTPError as error:
    exit("Can't get data from server:\n{0}".format(error))

Если статус ответа будет отличаться от 2xx, то функция выкинет исключение HTTPError. Внешний код узнает о проблеме и корректно завершит работу программы.


payload = {"text": "python"}

response = requests.get('https://yandex.ru', params=payload)
response.raise_for_status()

>>> response.url
'https://yandex.ru/?text=python'




>>> response.text
'Weather report: Moscow, Russia
Overcast
    \  /       Переменная облачность
  _ /"".-.     -21--19 °C     
    \_(   ).   ↖ 4 km/h       
    /(___(__)  20 km          
               0.0 mm'

>>> response.raw
<urllib3.response.HTTPResponse object at 0x7f59da492a58>

>>> response.content
b'Weather report: Moscow, Russia
Overcast\n \x1b[38;5;240;1m     .--.
\x1b[0m \x1b[38;5;049m2\x1b[0m-\x1b[38;
\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94
\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80


>>> response.text
'{ "user_id" : "123132421" }'

>>> response.json()
{ "user_id" : "123132421" }


url = 'https://gist.github.com/статья'
data = {
  "new-text": "Теперь в этой статье написан этот текст"
}

response_get = requests.get(url)
response_get.raise_for_status()


response_post = requests.post(url, data=data)
response_post.raise_for_status()


Метод raise_for_status выкинет исключение (HTTPError), если запрос к серверу завершился неудачно. То есть если у запроса статус 4xx (ошибка клиента) или 5xx (ошибка сервера).

 

Эквивалентный код:

>>> if not response.ok:
...     raise requests.exceptions.HTTPError(response=reponse)

requests.exceptions.HTTPError ....




# response_get.text - выдаст статью, которую вы хотели.

# response_post.text - выдаст ту же статью, но уже отредактированную.



wttr.in/san%20francisco?nTqu&lang=en
https://github.com/Forgman75/weather.git
https://github.com/settings/tokens/new
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
vscode://vscode.github-authentication/did-authenticate?windowid=1&code=bfc473dd6196f4c6ccc6&state=2bd9c42f-58f6-42d5-9e62-47db08606b23
Sublime Text OmniMarkupPreviewer
https://github.com/lk-geimfari/mimesis
https://github.com/pallets/flask
https://github.com/kennethreitz/requests
https://github.com/un33k/python-slugify
https://gist.github.com/Beastrock/f244cf89994876b7225aec81b09dad6f
https://gist.github.com/Beastrock/2cd6dae877df27fc45d8f33d220e209a
https://gist.github.com/artbakulev/92e8036694c1861f19576bdcd0414d1e
https://githowto.com/ru
<script src="https://gist.github.com/Forgman75/1593795478d850f3ed776c3e518af5d8.js"></script>
https://www.youtube.com/channel/UCA1piMIhFwAjIm-0Bofh9SA   канал devman
https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
https://chris.beams.io/posts/git-commit/
https://vasily.polovnyov.ru/posts/git-commit-messages.html
https://youtu.be/Yab7gE8K1Ko  Форматирование строк Python. Метод format строк
https://www.youtube.com/watch?v=QlkQNWQUCLc  F-строка. F-string. Программирование на Python
https://pyformat.info/
https://wiki.python.org/moin/Templating
https://python-scripts.com/f-strings
https://pip.pypa.io/en/stable/reference/requirements-file-format/#requirements-file-format
https://dvmn.org/encyclopedia/pip/pip_virtualenv/
https://dvmn.org/encyclopedia/qna/12/chto-takoe-virtualnoe/
https://dvmn.org/encyclopedia/tutorial/tutorial_readme/
https://dvmn.org/encyclopedia/modules/requests/
https://github.com/pyenv/pyenv/blob/master/COMMANDS.md
https://docs-python.ru/standart-library/modul-urllib-parse-python/funktsija-urljoin-modulja-urllib-parse/
https://semakin.dev/2020/04/requirements_txt/
http://zabaykin.ru/?p=436
https://qastack.ru/programming/296536/how-to-urlencode-data-for-curl-command
http://docs.python-requests.org/
https://khashtamov.com/ru/python-requests/
http://pythonicway.com/python-fileio
https://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Status-Codes
https://slides.dvmn.org/voron434/requests/#/18
https://python-scripts.com/json
https://pythonworld.ru/moduli/modul-json.html
https://pymotw.com/2/urlparse/
https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse
https://docs.python.org/3/library/functions.html#any
https://pip.readthedocs.io/en/latest/user_guide/#requirements-files
https://ru.hexlet.io/courses/git_base/lessons/git_gitignore/theory_unit
https://pypi.org/project/python-dotenv/0.9.1/
https://help.github.com/articles/removing-sensitive-data-from-a-repository/
https://docs.python.org/3/library/argparse.html
https://help.github.com/articles/licensing-a-repository/
https://choosealicense.com/
https://slides.dvmn.org/voron434/argparse/#/1
https://jenyay.net/Programming/Argparse
https://slides.dvmn.org/voron434/git-commits/
https://slides.dvmn.org/voron434/git-branches/
https://stackoverflow.com/questions/15883526/how-is-the-name-variable-in-a-python-module-defined
https://www.python.org/dev/peps/pep-0020/
https://www.python.org/dev/peps/pep-0008/
https://hackernoon.com/why-senior-devs-write-dumb-code-and-how-to-spot-a-junior-from-a-mile-away-27fa263b101a
https://pillow.readthedocs.io/en/stable/handbook/tutorial.html
https://cscalfani.medium.com/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536
https://factorio.com/blog/post/fff-366
https://www.tutorialsteacher.com/python/public-private-protected-modifiers
https://medium.com/@vivekmadurai/web-evolution-from-1-0-to-3-0-e84f2c06739
https://slides.dvmn.org/voron434/requests/#/4
http://2.python-requests.org/en/master/user/quickstart/#response-status-codes
https://habrahabr.ru/post/40697/
https://habrahabr.ru/post/149086/
https://bit.ly/3CXA3si          https://python.ivan-shamaev.ru/python-api-tutorial-get-post-auth-http-requests-examples/
https://bit.ly/30iW7PZ
https://bit.ly/3qneiyB       Основание
https://habr.com/ru/company/playrix/blog/350492/  Git: советы новичкам – часть 3
https://habrahabr.ru/company/playrix/blog/348864/  Git: советы новичкам – часть 2
https://habrahabr.ru/company/playrix/blog/345732/  Git: советы новичкам – часть 1
https://gb.ru/posts/github-rabota-s-vetkami-i-kommitami
https://gb.ru/posts/github-nastrojka-i-pervaya-publikaciya-proekta
https://habr.com/ru/post/266969/     Что такое красивый код и как его писать?
https://all-python.ru/osnovy/enumerate.html
https://metaclass.kts.studio/aiohttp_practice
https://habr.com/ru/company/kts/blog/580202/ Первые шаги в aiohttp, часть 3: публикуем приложение в Интернете
https://habr.com/ru/company/kts/blog/579214/ Первые шаги в aiohttp, часть 2: подключаем базу данных к приложению
https://habr.com/ru/company/kts/blog/560058/ Первые шаги в aiohttp
https://pythonru.com/biblioteki/pyspark-dlja-nachinajushhih
https://python-scripts.com/requests
https://habr.com/ru/post/490754/     Редактор кода Visual Studio Code. 
Самый подробный гайд по настройке и установке плагинов для начинающих
https://marketplace.visualstudio.com/items?itemName=ms-python.python
https://code.visualstudio.com/docs/python/python-tutorial#_prerequisites
https://code.visualstudio.com/docs/languages/python
https://code.visualstudio.com/docs/python/jupyter-support
https://conda.io/projects/conda/en/latest/user-guide/getting-started.html    https://bit.ly/3Dha9Qc
https://code.visualstudio.com/docs/python/environments
https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration
https://pythonist.ru/biblioteka-urllib3-python/
https://docs-python.ru/standart-library/modul-urllib-parse-python/funktsija-urlparse-modulja-urllib-parse/
https://live.skillbox.ru/webinars/code/gotovimsya-k-sozdaniyu-servera-na-c030621/
https://live.skillbox.ru/webinars/code/znakomimsya-s-professiei-testirovshika151121/?utm_source=tg&utm_medium=messages&utm_campaign=all_all_tg_messages_invite_intensive-365-2021-11_all_code_skillbox&utm_term=intensive





Задача 2

https://bit.ly/
https://dev.bitly.com/get_started.html
документация  https://dev.bitly.com/docs/getting-started/introduction
генератор токенов https://bitly.com/a/oauth_apps
GENERIC ACCESS TOKEN — нужный тип токена
Access token: 505e0cd68744bcf4ac2b768f71e021d615be90ad

You'll use the POST method to the /v4/shorten endpoint. Append your access token as a header in your request. Here's an example: Authorization: Bearer {token}.

POST /v4/shorten https://api-ssl.bitly.com/v4/shorten

{
    "group_guid": "Ba1bc23dE4F",  
    "domain": "bit.ly",  
    "long_url": "https://dev.bitly.com"  
}  

def shorten_link(token, url):
Извлечь JSON данные из ответа
Слайды
Отладочный код
print('Битлинк', shorten_link(token, url))


Вы можете ввести ссылку прямо в терминале.
Программа выведет битлинк для этой ссылки.

Пользователи иногда опечатываются. В таком случае API Bitly вернёт ошибку. Проверьте ответ от API. Если пользователь ввёл неверную ссылку, скажите ему об этом, выведите сообщение об ошибке.

Функция shorten_link сокращает ссылку и возвращает битлинк. Её код выглядит так:

def shorten_link(token, link):
  ... # здесь может появиться исключение
  return bitlink
Функция shorten_link может успешно выполнить свою работу и вернуть bitlink, а может прерваться исключение. Внешний код знает об этом и оборачивает вызов функции shorten_link в блок try except, чтобы перехватить исключение и отреагировать на него. Например, в случае ошибки скрипт может сообщить о проблеме пользователю и завершить работу программы.

def shorten_link(token, link):
  ... # здесь может появиться исключение
  return bitlink


...
try:
  bitlink = shorten_link(token, user_input)
except requests.exceptions.HTTPError:
  ... # если ошибка
... # если все впорядке
В работе с API часто используют исключения, чтобы передать информацию о проблеме из тела функций во внешний код. Тип исключения кодирует тип ошибки. В данном примере перехватывается HTTPError. Подробнее про исключения читайте в статье Энциклопедии Девмана.


Если ссылка будет в статье или блоге, вам захочется узнать, сколько людей по ней перешли. Напишите функцию, которая будет выводить количество кликов по ссылке.

Функция count_clicks подсчитывает количество кликов для битлинка и возвращает число:

def count_clicks(token, link):
  ... # здесь может появиться исключение
  return clicks_count
Функция count_clicks может успешно выполнить свою работу и вернуть число, а может прерваться с исключением:

def count_clicks(token, link):
  ... # здесь может появиться исключение
  return clicks_count

...
try:
  clicks_count = count_clicks(token, user_input)
except requests.exceptions.HTTPError:
  ... # если ошибка
... # если все впорядке
Подробнее про исключения читайте в статье Энциклопедии Девмана.


urllib.parse.urlparse

Алине иногда нужно сокращать длинные ссылки, а иногда получать статистику кликов по короткой ссылке. Добавьте проверку: если пользователь указал короткую ссылку, выводите статистку кликов по ней, а если нет, сокращайте.

Надежнее всего это сделать через простой запрос к API.
При вводе в программу битлинка выведется сумма кликов по нему
 При вводе других ссылок выводится битлинк
 Появилась новая функция для проверки ссылок “битлинк это или нет”
Новая функция def is_bitlink(url)
urllib.parse.urlparse
Split URL into component pieces
Документация
Cвойство Response.ok из библиотеки requests
Переменные-флаги

 
Спрячьте токен от преподавателя

Отделите запросы к API от вывода в консоль
В разработке принято разделять работу с консолью от работы с сетью. Это упрощает тестирование и повторное использование кода.
Убедитесь, что print вызывается только внутри if __name__ == "__main__" или def main.
return
Верните из функции данные, снаружи разберутся что, когда и куда “принтить”
Исключения
Позволяют сообщить о проблеме из функции наружу

Вывод:

Код внутри if __name__ == '__main__': не исполняется при импорте файла.

Поэтому весь код, который не является объявлением функций и констант, принято заносить внутрь if __name__ == '__main__'.
Спрячьте все вызовы `print` внутрь ifmain, либо упакуйте их в функции, которые вызываются кодом внутри ifmain.







Файл выводит индекс числа из рандомно сгенерированного списка (список из 10 целых, четных,
отсортированных по возрастанию чисел) которое соответствует введённому пользователем.
Если введенное пользователем число отсутствует в списке, будет выведено соответствующее сообщение.
Также файл сообщит о некорректном вводе значения.

from random import sample
Из библиотеки random импортирует метод sample, который формирует список заданной величины из рандомных заданных значений.

Функция s
Принимает в себя "заприваченный" список list_ и target. Ищет в list_ индекс введённого target и возвращает его.
Если target нет в вписке list_, возвращает None.







Настоящий документ предназначен для ознакомления пользователя с функциональными возможностями языка разметки Markdown. 
Markdown – это облегченный язык разметки, который является инструментом преобразования кода в HTML.
Главной особенностью данного языка является максимально простой синтаксис, который служит для упрощения написания и чтения кода разметки, что, в свою очередь, позволяет легко его корректировать.
Теперь рассмотрим более подробно функции языка разметки Markdown.   

Markdown не является заменой HTML. Синтаксис Markdown достаточно ограничен, и соответствует лишь небольшому подмножеству элементов HTML. Он включает в себя следующие элементы:

1. Блочные элементы
 + [Параграфы и разрывы строк](#Parag);
 + [Заголовки](#Headers);
 + [Цитаты](#Blockquotes);
 + [Списки](#Lists)
 + [Блоки кода](#CodeBlocks);
 + [Горизонтальные (разделительные) линии](#Lines).
2. Строчные элементы
 + [Ссылки](#Links);
 + [Выделение текста](#Emphasis);
 + [Кодовые фрагменты строк](#Code);
 + [Изображения](#Images).
3. Дополнительные элементы
 + [Обратный слеш](#Backslash Escapes);
 + [Автоматические ссылки](#Automatic Links);
 + [Специальные символы HTML](#SpecialSymbol).  

Более подробно с перечисленными функциями можно ознакомиться в разделе «Описание синтаксиса».

ОПИСАНИЕ СИНТАКСИСА
=========================
   
Блочные элементы
--------------------------  

##### <a name="Parag"></a>	Параграфы и разрывы строк
Для того, чтобы создать параграф с использованием синтаксиса языка Markdown, достаточно отделить строки текста одной (или более) пустой строкой (пустой считается всякая строка, которая не содержит в себе ничего, кроме пробелов и символов табуляции).
Для того, чтобы вставить видимый перенос строки (элемент `<br/>`) необходимо окончить строку двумя пробелами и нажатием клавиши «Enter». 
Многие элементы синтаксиса Markdown выглядят и работают гораздо лучше в случае, когда их форматируют с помощью «жесткого перевода строк» (разделение строк, осуществленное самим пользователем, а не программой автоматически). К таким элементам относятся цитаты, списки и пр.  

##### <a name="Headers"></a> Заголовки  
Язык разметки Markdown поддерживает 2 стиля обозначения заголовков: подчеркивание и выделение символом («#»).
Выделение заголовков с помощью подчеркивания производится знаками равенства («=») в случае, если заголовок первого уровня, и дефисами («-») в случае, если заголовок второго уровня. Количество знаков подчеркивания не ограничивается.
При выделении заголовков с помощью символа («#») используется от одного до шести данных символов, которые устанавливаются в начале строки (перед заголовком). В данном случае количество символов соответствует уровню заголовка. Кроме того, заголовок возможно снабдить закрывающимися символами («#»), хотя это и не является обязательным. Количество закрывающихся символов не обязано соответствовать количеству начальных символов. Уровень заголовка определяется по количеству начальных символов.  
Заголовки первого и второго уровней, выполненные с помощью подчеркивания, выглядят следующим образом:

    Заголовок первого уровня
    ========================
    Заголовок второго уровня
    -------------------------

Заголовки первого, третьего и шестого уровней, выполненные с помощью символа («#»), выглядят следующим образом:
	
    #  Заголовок первого уровня
    ### Заголовок третьего уровня
    ###### Заголовок шестого уровня
Приведенные выше заголовки, выполненные с помощью символа («#») тождественны следующим:

    #  Заголовок первого уровня #
    ### Заголовок третьего уровня ###
    ###### Заголовок шестого уровня ######
В результате на экран выводится следующее:

Заголовок первого уровня
========================

Заголовок второго уровня
------------------------

#  Заголовок первого уровня
### Заголовок третьего уровня
###### Заголовок шестого уровня

##### <a name="Blockquotes"></a> 	Цитаты  
Для обозначения цитат в языке Markdown используется знак «больше» («>»). Его можно вставлять как перед каждой строкой цитаты, так и только перед первой строкой параграфа. 
Также синтаксис Markdown позволяет создавать вложенные цитаты (цитаты внутри цитат). Для их разметки используются дополнительные уровни знаков цитирования («>»).
Цитаты в Markdown могут содержать всевозможные элементы разметки.
Цитаты в языке Markdown выглядят следующим образом:

    >Это пример цитаты,
    >в которой перед каждой строкой
    >ставится угловая скобка.

    >Это пример цитаты,
    в которой угловая скобка
    ставится только перед началом нового параграфа.
    >Второй параграф.

Вложение цитаты в цитату выглядит следующим образом:

    > Первый уровень цитирования
    >> Второй уровень цитирования
    >>> Третий уровень цитирования
    >
    >Первый уровень цитирования
В результате на экран выводится следующее:

>Это пример цитаты,
>в которой перед каждой строкой
>ставится угловая скобка.

>Это пример цитаты,
в которой угловая скобка
ставится только перед началом нового параграфа.

>Второй параграф.

Вложенная цитата:

> Первый уровень цитирования
>> Второй уровень цитирования
>>> Третий уровень цитирования
>
>Первый уровень цитирования


Уровень цитирования не может превышать 15-й.  

##### <a name="Lists"></a> Списки
Markdown поддерживает упорядоченные (нумерованные) и неупорядоченные (ненумерованные) списки.
 Для формирования неупорядоченный списков используются такие маркеры, как звездочки, плюсы и дефисы. Все перечисленные маркеры могут использоваться взаимозаменяемо. 
Для формирования упорядоченных списков в качестве маркеров используются числа с точкой. Важной особенностью в данном случае является то, что сами номера, с помощью которых формируется список, не важны, так как они не оказывают влияния на выходной HTML код. Как бы ни нумеровал пользователь список, на выходе он в любом случае будет иметь упорядоченный список, начинающийся с единицы (1, 2, 3…). Эту особенность стоит учитывать в том случае, когда необходимо использовать порядковые номера элементов в списке, чтобы они соответствовали номерам, получающимся в HTML.
Упорядоченные списки всегда следует начинать с единицы. Маркеры списков обычно начинаются с начала строки, однако они могут быть сдвинуты, но не более чем на 3 пробела. За маркером должен следовать пробел, либо символ табуляции. 
При  необходимости в список можно вставить цитату. В этом случае обозначения цитирования ( «>» ) нужно писать с отступом.
Упорядоченные списки выглядят следующим образом:

    1.	Проводник
    2.	Полупроводник
    3.	Диэлектрик

Неупорядоченные списки выглядят следующим образом:

    * Проводник
    * Полупроводник
    * Диэлектрик

Или

    - Проводник
    - Полупроводник
    - Диэлектрик

Или

    + Проводник
    + Полупроводник
    + Диэлектрик
На выходе всех трех перечисленных вариантов имеется один и тот же результат.
В результате на экран выводится следующее:

1. Проводник
2. Полупроводник
3. Диэлектрик

и

+ Проводник
+ Полупроводник
+ Диэлектрик

Цитата, вставленная в список, выглядит следующим образом:

    1. Элемент списка с цитатой:

        > Это цитата
        > внутри элемента списка.

     2. Второй элемент списка

В результате на экран выводится следующее:

1. Элемент списка с цитатой:

    > Это цитата
    > внутри элемента списка.

2. Второй элемент списка


При вставке цитат в элементы списка важно учитывать, что элементы списка должны находиться на одном уровне, а цитаты должны указываться с отступом. В случае, если правило с единым уровнем списка не соблюдается, следующий после цитаты элемент списка будет автоматически нумероваться цифрой «1.». 
Кроме того, при необходимости в список можно вставить исходный код. В этом случае его нужно писать с двойным отступом – 8 пробелов или 2 символа табуляции. 

 - Элемент списка, содержащий исходный код

		<исходный код >  

##### <a name="CodeBlocks"></a> Блоки кода
Отформатированные блоки кода используются в случае необходимости процитировать исходный код программ или разметки. 
Для создания блока кода в языке Markdown необходимо каждую строку параграфа начинать  с отступа, состоящего из четырех пробелов или  одного символа табуляции. Блок кода продолжается до тех пор, пока не встретится строка без отступа (или конец текста).  Внутри блока кода амперсанды («&») и угловые скобки («<» и «>») автоматически преобразуются в элементы HTML разметки. Кроме того, следует отметить, что внутри блоков кода обычный синтаксис Markdown не обрабатывается. 
Блок кода в Markdown выглядит следующим образом:

Это обычный параграф:

	Это блок кода

##### <a name="Lines">	</a> Горизонтальные линии (разделители)  

Для того чтобы создать горизонтальную линию с использованием синтаксиса языка Markdown, необходимо поместить три (или более)дефиса или звездочки на отдельной строке текста. Между ними возможно располагать пробелы. 
Горизонтальные линии в Markdown выглядят следующим образом:

    Первая часть текста, который необходимо разделить
    ***
    Вторая часть текста, который необходимо разделить

Или

    Первая часть текста, который необходимо разделить

    ---

    Вторая часть текста, который необходимо разделить
В результате на экран выводится следующее:

Первая часть текста, который необходимо разделить
***
Вторая часть текста, который необходимо разделить  

При использовании данного инструмента важно помнить, что после первой части текста и перед второй необходимо оставлять пустую строку. Данное правило необходимо соблюдать только при использовании дефисов. Если его не соблюдать, на экран будет выведен заголовок второго уровня и строка обычного текста.  При использовании символа звездочки данным правилом можно пренебречь.  

 Строчные элементы
-------------------  

##### <a name="Links"></a> Ссылки
Markdown поддерживает два стиля оформления ссылок:

 - Гиперссылка, с немедленным указанием адреса (внутритекстовая);
 - Гиперссылка, подобная сноске.

Подразумевается, что помимо URL-адреса существует еще текст ссылки. Он заключается в квадратные скобки. 
Для создания внутритекстовой гиперссылки необходимо использовать круглые скобки сразу после закрывающей квадратной. Внутри них необходимо поместить URL-адрес. В них же возможно расположить название, заключенное в кавычки, которое будет отображаться при наведении, но этот пункт не является обязательным. 
 
      [пример](http://example.com/ "Необязательная подсказка")
В результате на экран выводится следующее:
[пример](http://example.com/ "Необязательная подсказка")
При ссылке на локальную директорию возможно использование относительного пути (от текущей страницы, сайта и т.п.)  

При создании сносной гиперссылки вместо целевого адреса используется вторая пара квадратных скобок, внутри которых помещается метка, идентификатор ссылки (id).

    [пример][id]:
Также, можно использовать пробел, чтобы отделять 2 пары квадратных скобок: 

    [пример] [id]: 

В этом случае возможно определить идентификатор в любом месте документа: 

    [id]: http://example.com/ "Необязательная подсказка"

В результате на экран выводится следующее:
[пример] [id] 
[id]: http://example.com/ "Необязательная подсказка"
Иными словами, она состоит из следующих элементов:

 - Идентификатор ссылки, окружённый квадратными скобками (которым может предшествовать необязательный отступ от одного до трёх пробелов);
 - 	Двоеточие;
 - 	Один или несколько пробелов (или символов табуляции);
 - 	URL гиперссылки;
 - 	Необязательный заголовок (подсказка к изображению, которая всплывает при наведении на него) гиперссылки, заключённый либо в двойные или одиночные кавычки, либо в скобки.

Идентификаторы ссылок могут состоять из букв, цифр, пробелов и знаков пунктуации, однако они не чувствительны к регистру. То есть эти два варианта эквивалентны:

    [текст ссылки][a]
    [текст ссылки][A]
Markdown позволяет также использовать неявно выраженный идентификатор (сокращенный). В этом случае метка не приводится, вместо неё текст гиперссылки используется  и в качестве её имени, а вторая пара квадратных скобок остаётся пустою.
Например, чтобы сделать слово «Example» гиперссылкой, ведущей на сайт <http://example.com/>, достаточно написать:

    [Example][]
и затем определить гиперссылку:

    [Example]: http://example.com/
В результате на экран выводится следующее:
[Example][]
[Example]: http://example.com/  

##### <a name="Emphasis"></a> 	Выделение текста
Markdown воспринимает звёздочки «*» и символы подчёркивания «_» как признаки смыслового выделения текста:

 - Текст, окружённый одиночными «*» или «_», будет заключен в HTML-тэг `<em>`.
 -  Текст, окружённый двойными «*» или «_», будет заключен в HTML-тэг `<strong>`.

Иными словами, текст, окруженный одинарными символами, выделяется курсивным шрифтом, а текст, окруженный двойными символами, выделяется полужирным шрифтом. 
Также, выделенный фрагмент может находиться в любой части слова. 
Текст, выделенный курсивом с использованием синтаксиса языка Markdown, выглядит следующим образом:

    *Пример*  
*Пример*  

Текст, выделенный полужирным шрифтом с использованием синтаксиса языка Markdown, выглядит следующим образом:

    **Пример**
**Пример**  

Текст, выделенный курсивным полужирным шрифтом с использованием синтаксиса языка Markdown выглядит следующим образом:

    ***Пример***
***Пример***

Все приведенные выше примеры аналогичны следующим:

    _Пример_

    __Пример__

    Пере___распред___деление

    ___Пример___  

##### <a name="Code"></a>	Кодовые фрагменты строк
Чтобы отметить фрагмент строки, содержащий код, необходимо окружить его обратными апострофами «`».  При использовании кодовых фрагментов строк текст будет отображаться в виде моноширинного шрифта. 
В отличие от блоков кода, кодовый фрагмент позволяет поместить код внутрь обычного абзаца текста.
Кодовый фрагмент строки в языке Markdown выглядит следующим образом:

Используйте оператор `if`  

##### <a name="Images"></a>	Изображения
В Markdown существует 2 способа вставки изображений в документ:

a.	С помощью непосредственного указания URL-адреса изображения. Синтаксис данной команды выглядит следующим образом:

    ![Альтернативный текст](/путь/к/изображению.jpg)
или

    ![Альтернативный текст](/путь/к/изображению.jpg "Подсказка")
Иными словами, он состоит из следующих элементов:

 - восклицательный знак;
 -  квадратные скобки, в которых указывается альтернативный изображению текст (он станет содержимым атрибута в элементе img);
 -  круглые скобки, содержащие URL-адрес или относительный путь изображения, а также (необязательно) всплывающую подсказку, заключённуе в двойные или одиночные кавычки.

b.	С помощью метки-идентификатора.  Синтаксис данной команды записывается следующим образом:

    ![Альтернативный текст][id]
где «id» — имя определённой метки изображения. Метки изображений определяются при помощи синтаксиса, совершенно идентичного меткам гиперссылок:

    [id]: путь/к/изображению "Необязательная подсказка"
Важной особенностью является то, что Markdown не позволяет задать размеры изображения (ширину, высоту).  

 Дополнительные элементы
-------------------------  

##### <a name="Backslash Escapes"></a>	Обратный слеш
Может употребляться в Markdown перед специальными символами для того, чтобы они воспринимались в их буквальном (а не служебном) значении. Полный список данных символов приводится ниже:

«\»  - слеш;  

«`»  - обратный апостроф;  

«*»  - звездочка;  

«_»  - символ подчеркивания;  

«{}»  - фигурные скобки;  

«[]»  - квадратные скобки;  

«()»  - круглые скобки;  

«#»  - символ решетки;  

«+»  - плюс;  

«-»  - минус (дефис);  

«.»  – точка;  

«!»  - восклицательный знак.  

##### <a name="Automatic Links"></a> Автоматические ссылки
Markdown поддерживает упрощённый порядок автоматического создания ссылок для URL-адресов и адресов электронной почты. Для этого достаточно поместить URL-адрес или почтовый адрес в угловые скобки, и Markdown сделает его гиперссылкой. В отличие от вышеописанных стилей, в данном случае сам же URL-адрес или почтовый адрес становится и текстом гиперссылки. Автоматические ссылки на адреса электронной почты работают аналогично.
Автоматические ссылки в языке Markdown выглядят следующим образом

    <http://example.com/>
В результате на экран выводится следующее:
<http://example.com/>

Автоматическая ссылка на адрес электронной почты в Markdown выглядит следующим образом

    <address@example.com>
В результате на экран выводится следующее:
<address@example.com>  

##### <a name="SpecialSymbol"></a> Специальные символы HTML
В языке HTML существует два символа, требующих специального рассмотрения: это символы («&lt;») и («&amp;»). Левая угловая скобка используется как начало тэга; амперсанды применяются для обозначения специального символа HTML.
Для того чтобы использовать эти символы в их буквальном смысле, необходимо заменить их элементами HTML, а именно `&lt;` и `&amp;` соответственно.
При использовании Markdown подобных действий совершать не нужно. Он позволяет использовать эти символы в исходном виде. В случае если амперсанд используется как часть спецсимвола HTML, он останется неизменным. В противном случае Markdown преобразует его в `&amp;`. 





https://skyeng.ru/
https://www.englishdom.com/
https://puzzle-english.com/
https://ru.duolingo.com/
https://lingualeo.com/ru


https://dundle.com/lv/paysafecard/
https://www.cbr.ru/ckki/zh/subject/
https://www.youtube.com/watch?v=rLUzYeLdM0k  TCP/IP
